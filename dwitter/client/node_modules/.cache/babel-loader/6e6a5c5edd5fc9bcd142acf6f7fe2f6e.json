{"ast":null,"code":"export default class TweetService {\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n  }\n\n  async getTweets(username) {\n    console.log(this.tokenStorage);\n    const query = username ? `?username=${username}` : \"\";\n    return this.http.fetch(`/tweets${query}`, {\n      method: \"GET\",\n      headers: this.getHeaders()\n    });\n  }\n\n  async postTweet(text) {\n    return this.http.fetch(`/tweets`, {\n      method: \"POST\",\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        text,\n        username: \"ellie\",\n        name: \"ellie\"\n      })\n    });\n  }\n\n  async deleteTweet(tweetId) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: this.getHeaders()\n    });\n  }\n\n  async updateTweet(tweetId, text) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        text\n      })\n    });\n  }\n\n  getHeaders() {\n    const token = this.tokenStorage.getToken();\n    console.log(token);\n    return {\n      Authorization: `Bearer ${token}`\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/gim-yeongseog/Desktop/git repository/nodejs/dwitter/client/src/service/tweet.js"],"names":["TweetService","constructor","http","tokenStorage","getTweets","username","console","log","query","fetch","method","headers","getHeaders","postTweet","text","body","JSON","stringify","name","deleteTweet","tweetId","updateTweet","token","getToken","Authorization"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAOC,YAAP,EAAqB;AAC9B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACD;;AAEc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,YAAjB;AACA,UAAMK,KAAK,GAAGH,QAAQ,GAAI,aAAYA,QAAS,EAAzB,GAA6B,EAAnD;AACA,WAAO,KAAKH,IAAL,CAAUO,KAAV,CAAiB,UAASD,KAAM,EAAhC,EAAmC;AACxCE,MAAAA,MAAM,EAAE,KADgC;AAExCC,MAAAA,OAAO,EAAE,KAAKC,UAAL;AAF+B,KAAnC,CAAP;AAID;;AAEc,QAATC,SAAS,CAACC,IAAD,EAAO;AACpB,WAAO,KAAKZ,IAAL,CAAUO,KAAV,CAAiB,SAAjB,EAA2B;AAChCC,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,OAAO,EAAE,KAAKC,UAAL,EAFuB;AAGhCG,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBH,QAAAA,IADmB;AAEnBT,QAAAA,QAAQ,EAAE,OAFS;AAGnBa,QAAAA,IAAI,EAAE;AAHa,OAAf;AAH0B,KAA3B,CAAP;AASD;;AAEgB,QAAXC,WAAW,CAACC,OAAD,EAAU;AACzB,WAAO,KAAKlB,IAAL,CAAUO,KAAV,CAAiB,WAAUW,OAAQ,EAAnC,EAAsC;AAC3CV,MAAAA,MAAM,EAAE,QADmC;AAE3CC,MAAAA,OAAO,EAAE,KAAKC,UAAL;AAFkC,KAAtC,CAAP;AAID;;AAEgB,QAAXS,WAAW,CAACD,OAAD,EAAUN,IAAV,EAAgB;AAC/B,WAAO,KAAKZ,IAAL,CAAUO,KAAV,CAAiB,WAAUW,OAAQ,EAAnC,EAAsC;AAC3CV,MAAAA,MAAM,EAAE,KADmC;AAE3CC,MAAAA,OAAO,EAAE,KAAKC,UAAL,EAFkC;AAG3CG,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBH,QAAAA;AADmB,OAAf;AAHqC,KAAtC,CAAP;AAOD;;AAEDF,EAAAA,UAAU,GAAG;AACX,UAAMU,KAAK,GAAG,KAAKnB,YAAL,CAAkBoB,QAAlB,EAAd;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACA,WAAO;AACLE,MAAAA,aAAa,EAAG,UAASF,KAAM;AAD1B,KAAP;AAGD;;AAlD+B","sourcesContent":["export default class TweetService {\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n  }\n\n  async getTweets(username) {\n    console.log(this.tokenStorage);\n    const query = username ? `?username=${username}` : \"\";\n    return this.http.fetch(`/tweets${query}`, {\n      method: \"GET\",\n      headers: this.getHeaders(),\n    });\n  }\n\n  async postTweet(text) {\n    return this.http.fetch(`/tweets`, {\n      method: \"POST\",\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        text,\n        username: \"ellie\",\n        name: \"ellie\",\n      }),\n    });\n  }\n\n  async deleteTweet(tweetId) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: this.getHeaders(),\n    });\n  }\n\n  async updateTweet(tweetId, text) {\n    return this.http.fetch(`/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        text,\n      }),\n    });\n  }\n\n  getHeaders() {\n    const token = this.tokenStorage.getToken();\n    console.log(token);\n    return {\n      Authorization: `Bearer ${token}`,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}