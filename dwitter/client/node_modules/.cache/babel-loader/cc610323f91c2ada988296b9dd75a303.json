{"ast":null,"code":"export default class AuthService {\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n  }\n\n  async signup(username, password, name, email, url) {\n    const data = await this.http.fetch(`/auth/signup`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        username,\n        password,\n        name,\n        email,\n        url\n      })\n    });\n    this.tokenStorage.saveToken(data.token);\n    return data;\n  }\n\n  async login(username, password) {\n    const data = this.http.fetch(`/auth/login`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    this.tokenStorage.saveToken(data.token);\n    return data;\n  }\n\n  async me() {\n    const token = this.tokenStorage.getToken();\n    return this.http.fetch(`/auth/me`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  async logout() {\n    return;\n  }\n\n}","map":{"version":3,"sources":["/Users/gim-yeongseog/Desktop/git repository/nodejs/dwitter/client/src/service/auth.js"],"names":["AuthService","constructor","http","tokenStorage","signup","username","password","name","email","url","data","fetch","method","body","JSON","stringify","saveToken","token","login","me","getToken","headers","Authorization","logout"],"mappings":"AAAA,eAAe,MAAMA,WAAN,CAAkB;AAC/BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,YAAP,EAAqB;AAC9B,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACD;;AAEW,QAANC,MAAM,CAACC,QAAD,EAAWC,QAAX,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,GAAlC,EAAuC;AACjD,UAAMC,IAAI,GAAG,MAAM,KAAKR,IAAL,CAAUS,KAAV,CAAiB,cAAjB,EAAgC;AACjDC,MAAAA,MAAM,EAAE,MADyC;AAEjDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,QAAAA,QADmB;AAEnBC,QAAAA,QAFmB;AAGnBC,QAAAA,IAHmB;AAInBC,QAAAA,KAJmB;AAKnBC,QAAAA;AALmB,OAAf;AAF2C,KAAhC,CAAnB;AAWA,SAAKN,YAAL,CAAkBa,SAAlB,CAA4BN,IAAI,CAACO,KAAjC;AAEA,WAAOP,IAAP;AACD;;AAEU,QAALQ,KAAK,CAACb,QAAD,EAAWC,QAAX,EAAqB;AAC9B,UAAMI,IAAI,GAAG,KAAKR,IAAL,CAAUS,KAAV,CAAiB,aAAjB,EAA+B;AAC1CC,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBV,QAAAA,QADmB;AAEnBC,QAAAA;AAFmB,OAAf;AAFoC,KAA/B,CAAb;AAQA,SAAKH,YAAL,CAAkBa,SAAlB,CAA4BN,IAAI,CAACO,KAAjC;AACA,WAAOP,IAAP;AACD;;AAEO,QAAFS,EAAE,GAAG;AACT,UAAMF,KAAK,GAAG,KAAKd,YAAL,CAAkBiB,QAAlB,EAAd;AAEA,WAAO,KAAKlB,IAAL,CAAUS,KAAV,CAAiB,UAAjB,EAA4B;AACjCC,MAAAA,MAAM,EAAE,KADyB;AAEjCS,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASL,KAAM;AADxB;AAFwB,KAA5B,CAAP;AAMD;;AAEW,QAANM,MAAM,GAAG;AACb;AACD;;AAjD8B","sourcesContent":["export default class AuthService {\n  constructor(http, tokenStorage) {\n    this.http = http;\n    this.tokenStorage = tokenStorage;\n  }\n\n  async signup(username, password, name, email, url) {\n    const data = await this.http.fetch(`/auth/signup`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        username,\n        password,\n        name,\n        email,\n        url,\n      }),\n    });\n\n    this.tokenStorage.saveToken(data.token);\n\n    return data;\n  }\n\n  async login(username, password) {\n    const data = this.http.fetch(`/auth/login`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        username,\n        password,\n      }),\n    });\n\n    this.tokenStorage.saveToken(data.token);\n    return data;\n  }\n\n  async me() {\n    const token = this.tokenStorage.getToken();\n\n    return this.http.fetch(`/auth/me`, {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n\n  async logout() {\n    return;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}