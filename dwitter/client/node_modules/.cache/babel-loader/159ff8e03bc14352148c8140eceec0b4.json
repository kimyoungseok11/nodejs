{"ast":null,"code":"export default class TweetService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username$=${username}` : \"\";\n    return this.http.fetch(`/tweets${query}`, {\n      method: \"GET\"\n    });\n  }\n\n  async postTweet(text) {\n    const response = this.http.fetch(`/tweets`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        text,\n        username: \"kim\",\n        name: \"kim\"\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = this.http.fetch(`/tweets/${tweetId}`, {\n      method: \"DELETE\"\n    });\n\n    if (response.status !== 204) {\n      throw new Error();\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/gim-yeongseog/Desktop/git repository/nodejs/dwitter/client/src/service/tweet.js"],"names":["TweetService","constructor","http","getTweets","username","query","fetch","method","postTweet","text","response","body","JSON","stringify","name","data","json","status","Error","message","deleteTweet","tweetId","updateTweet","baseURL","headers"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAEc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxB,UAAMC,KAAK,GAAGD,QAAQ,GAAI,cAAaA,QAAS,EAA1B,GAA8B,EAApD;AACA,WAAO,KAAKF,IAAL,CAAUI,KAAV,CAAiB,UAASD,KAAM,EAAhC,EAAmC;AACxCE,MAAAA,MAAM,EAAE;AADgC,KAAnC,CAAP;AAGD;;AAEc,QAATC,SAAS,CAACC,IAAD,EAAO;AACpB,UAAMC,QAAQ,GAAG,KAAKR,IAAL,CAAUI,KAAV,CAAiB,SAAjB,EAA2B;AAC1CC,MAAAA,MAAM,EAAE,MADkC;AAE1CI,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBJ,QAAAA,IADmB;AAEnBL,QAAAA,QAAQ,EAAE,KAFS;AAGnBU,QAAAA,IAAI,EAAE;AAHa,OAAf;AAFoC,KAA3B,CAAjB;AAQA,UAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;;AACA,QAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAEgB,QAAXK,WAAW,CAACC,OAAD,EAAU;AACzB,UAAMX,QAAQ,GAAG,KAAKR,IAAL,CAAUI,KAAV,CAAiB,WAAUe,OAAQ,EAAnC,EAAsC;AACrDd,MAAAA,MAAM,EAAE;AAD6C,KAAtC,CAAjB;;AAGA,QAAIG,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,EAAN;AACD;AACF;;AAEgB,QAAXI,WAAW,CAACD,OAAD,EAAUZ,IAAV,EAAgB;AAC/B,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAAE,GAAE,KAAKiB,OAAQ,WAAUF,OAAQ,EAAnC,EAAsC;AAChEd,MAAAA,MAAM,EAAE,KADwD;AAEhEiB,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFuD;AAGhEb,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBJ,QAAAA;AADmB,OAAf;AAH0D,KAAtC,CAA5B;AAOA,UAAMM,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;;AACA,QAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAlD+B","sourcesContent":["export default class TweetService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username$=${username}` : \"\";\n    return this.http.fetch(`/tweets${query}`, {\n      method: \"GET\",\n    });\n  }\n\n  async postTweet(text) {\n    const response = this.http.fetch(`/tweets`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        text,\n        username: \"kim\",\n        name: \"kim\",\n      }),\n    });\n    const data = await response.json();\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = this.http.fetch(`/tweets/${tweetId}`, {\n      method: \"DELETE\",\n    });\n    if (response.status !== 204) {\n      throw new Error();\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        text,\n      }),\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}