{"ast":null,"code":"export default class TweetService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username$=${username}` : \"\";\n    const response = await this.http.fetch(`/tweets${query}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text,\n        username: \"kim\",\n        name: \"kim\"\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (response.status !== 204) {\n      throw new Error();\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/gim-yeongseog/Desktop/git repository/nodejs/dwitter/client/src/service/tweet.js"],"names":["TweetService","constructor","http","getTweets","username","query","response","fetch","method","headers","data","json","status","Error","message","postTweet","text","baseURL","body","JSON","stringify","name","deleteTweet","tweetId","updateTweet"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAKA,IAAL,GAAYA,IAAZ;AACD;;AAEc,QAATC,SAAS,CAACC,QAAD,EAAW;AACxB,UAAMC,KAAK,GAAGD,QAAQ,GAAI,cAAaA,QAAS,EAA1B,GAA8B,EAApD;AACA,UAAME,QAAQ,GAAG,MAAM,KAAKJ,IAAL,CAAUK,KAAV,CAAiB,UAASF,KAAM,EAAhC,EAAmC;AACxDG,MAAAA,MAAM,EAAE,KADgD;AAExDC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAF+C,KAAnC,CAAvB;AAIA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAEc,QAATK,SAAS,CAACC,IAAD,EAAO;AACpB,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKU,OAAQ,SAAjB,EAA2B;AACrDT,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF4C;AAGrDS,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBJ,QAAAA,IADmB;AAEnBZ,QAAAA,QAAQ,EAAE,KAFS;AAGnBiB,QAAAA,IAAI,EAAE;AAHa,OAAf;AAH+C,KAA3B,CAA5B;AASA,UAAMX,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AAEgB,QAAXY,WAAW,CAACC,OAAD,EAAU;AACzB,UAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKU,OAAQ,WAAUM,OAAQ,EAAnC,EAAsC;AAChEf,MAAAA,MAAM,EAAE,QADwD;AAEhEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFuD,KAAtC,CAA5B;;AAIA,QAAIH,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,EAAN;AACD;AACF;;AAEgB,QAAXW,WAAW,CAACD,OAAD,EAAUP,IAAV,EAAgB;AAC/B,UAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKU,OAAQ,WAAUM,OAAQ,EAAnC,EAAsC;AAChEf,MAAAA,MAAM,EAAE,KADwD;AAEhEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFuD;AAGhES,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBJ,QAAAA;AADmB,OAAf;AAH0D,KAAtC,CAA5B;AAOA,UAAMN,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIL,QAAQ,CAACM,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACI,OAAf,CAAN;AACD;;AACD,WAAOJ,IAAP;AACD;;AA1D+B","sourcesContent":["export default class TweetService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username$=${username}` : \"\";\n    const response = await this.http.fetch(`/tweets${query}`, {\n      method: \"GET\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/tweets`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        text,\n        username: \"kim\",\n        name: \"kim\",\n      }),\n    });\n    const data = await response.json();\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n    if (response.status !== 204) {\n      throw new Error();\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        text,\n      }),\n    });\n    const data = await response.json();\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n    return data;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}